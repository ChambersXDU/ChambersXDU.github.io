<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计科大二上速通指北</title>
    <link href="/2022/04/10/%E8%AE%A1%E7%A7%91%E5%A4%A7%E4%BA%8C%E4%B8%8A%E9%80%9F%E9%80%9A%E6%8C%87%E5%8C%97/"/>
    <url>/2022/04/10/%E8%AE%A1%E7%A7%91%E5%A4%A7%E4%BA%8C%E4%B8%8A%E9%80%9F%E9%80%9A%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>20级计科大神众多，自然也是非常之卷。本文简单探讨如何在这种环境下，以较低的时间成本得到较高的回报收益，适合于不想完全摆烂但又懒于付出大量学习时间的人。</p><h3 id="课程与考试安排"><a href="#课程与考试安排" class="headerlink" title="课程与考试安排"></a>课程与考试安排</h3><p>西电计科大二上有 数据结构、概率论、数字电路、电路分析、大学物理II、马克思主义基本原理等高学分课程，同时还要应付信号与系统实验、大学物理实验。其中数电、电路、数据结构和软工以及其他院系的课程并不一致。</p><p>期中考试有电路分析与大学物理，不过这两门的期中占比不大。</p><p>期末考试数据结构有机考,占30分。</p><h3 id="概率论"><a href="#概率论" class="headerlink" title="概率论"></a>概率论</h3><p>难度：★★★★</p><p>全名叫“概率论与数理统计“。这门课在机器学习、人工智能这一块儿用处非常多，是一门很“实用”的数学课。</p><p>概率论部分有相当多的微积分计算，而数理统计则会有很多的公式要记。</p><p>练习册的题目有一定的难度，做不出来可以到对策府库上看看习题解析。</p><p>这门课关键在于理解，有很多题目是非常吃概念。但是很多概念与公式靠死记是记不住的。推荐张宇老师的考研基础课，讲的相当通俗、透彻，用来应付考试和作业足够了。</p><p>20级的考试比较难，年级里有相当数量的同学挂了这门课。虽然学分不太高但是也请严肃对待。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>难度：★★★★☆</p><p>这门课对于计算机专业来说非常重要，知识点也非常的多，因此需要很多时间去理解记忆。</p><p>对于参加过ACM或者OI的同学来说学这门课如同砍瓜切菜，但是对于新手，这门课需要相当的努力。</p><p>本课使用的是严蔚敏版教材，相当的晦涩难懂。同时这书有太多的伪代码，新手对着书很难写出能用的程序，建议不要死磕。</p><p>期末是有上机的，所以请把老师布置的OJ做好，就算自己写不出，抄别人代码也得要先理解然后尝试复现。非常建议学一些C++ STL的知识。你可以借助STL快速调用栈、队列等数据结构，而不必自己手写。同时也请好好复习指针。这对写XDOJ题非常有帮助。还有就是善用调试功能，嫌Dev C++调试太难用了可以尝试下Visual Studio、VS Code、Clion等。不过机房里也只有Code::Blocks和Dev C++能用，考前建议先熟悉一下。</p><p>图、树、排序的几个经典算法是需要熟记的，比如各种方式遍历树、DFS&#x2F;BFS、Dijkstra&#x2F;Floyd、堆排序、快速排序等。考场上是来不及自己想出来的。</p><p>我们这一届上机题考了后缀表达式（栈）、完全二叉树、链表&#x2F;数组、连通图（DFS、BFS）。</p><p>这门课是计算机考研的专业课，网上有很多教学视频，可以辅助学习。另推荐一个up主：正月点灯笼，排序算法讲的很好。</p><p>打印店里买不到往年题。<a href="https://www.docin.com/p-2424573198.html">西安电子科技大学期末数据结构试题</a>这个题目不知道是不是真的，但是形式类似，可以参考。</p><h3 id="数字电路"><a href="#数字电路" class="headerlink" title="数字电路"></a>数字电路</h3><p>难度：★★☆</p><p>这门课教你以二进制的方式思考、解决问题，部分知识在计组里也有所涉及。</p><p>难度在大二上的课里面算是中偏下的，没有需要深刻理解的内容，解题套路性非常强，但同时也容易忘，考前好好复习书上的例题。并不是所有的内容都考，尤其是时序电路这一章只会考较为简单的内容，考前问清考试范围针对性复习。</p><p>往年题老师会发，虽然只有一年的试题但也足够了。</p><p>教我的张平老师非常认真负责，非常推荐。</p><h3 id="电路基础"><a href="#电路基础" class="headerlink" title="电路基础"></a>电路基础</h3><p>难度：★★★☆</p><p>这门课算是Pro Plus版的高中电路课，理解掌握了KVL KCL 戴维南等效，基本上会了大半。</p><p>第四章开始会学习用相量解电路，其实就是复数，写起来简单，但是算起来怪麻烦，最好备个计算器。（但考试可能不让用）</p><p>发的练习册答案非常简略且漏洞很多，建议参考对策府库上的答案。</p><p>有期中考试，还挺难的，还好占比不高。期末感觉简单的多。打印店有往年题，考前买来练手。</p><p>推荐一个UP：犹如雨下，讲的通俗易懂，而且视频做成了合集，学起来很方便。</p><h3 id="大学物理2"><a href="#大学物理2" class="headerlink" title="大学物理2"></a>大学物理2</h3><p>难度：★★★★</p><p>电磁学+相对论+量子力学。和高中的电磁学不太一样，请谨慎吃老本。</p><p>难度感觉比大物1有所上升，微积分的运用更多了，公式也变多了，和高数下的内容有着非常微妙的关系。</p><p>电磁学部分归根结底就是学麦克斯韦方程组那四个公式，并懂得分别如何运用。有很多常用结论需要记住，方便解题。</p><p>相对论部分理解洛伦茨公式的运用基本上可以了；量子力学量力学，基本上只考量子状态那个知识点，纯靠记。</p><p>期中考试今年考的相当难，能考80分算不错了，很多人不及格。</p><p>同样有往年题，同样会考非常多练习册上的原题。</p><p>实在搞不懂可以看看高斯课堂，讲的还是挺明白的（至少知道咋做题了）。</p><h3 id="马克思主义基本原理"><a href="#马克思主义基本原理" class="headerlink" title="马克思主义基本原理"></a>马克思主义基本原理</h3><p>难度：★★</p><p>我感觉这课算是政治课里面最有条理性、逻辑性的了，知识点分布还是挺明白的。只考前四章，内容其实不多。</p><p>选择题似乎有题库，考试基本上都从里面出。主观题没有题库，得自己去网上找知识点、题目看。</p><p>考试前最好提前一两周浏览下知识点，留个印象，临考前三四天突击背一下。</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>typedef struct与struct</title>
    <link href="/2022/02/13/typedef-struct%E4%B8%8Estruct/"/>
    <url>/2022/02/13/typedef-struct%E4%B8%8Estruct/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在写链表的时候经常会遇见这样子的表示方法</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> *next;<br>&#125;Node,*Link;<br></code></pre></div></td></tr></table></figure><p>但在c++中似乎又很少看见在定义结构体的时候使用<code>typedef</code></p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><ul><li><p>对于<code>typedef</code></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> zifu<br><span class="hljs-comment">//那么这时 zifu 可以用来代替 char </span><br></code></pre></div></td></tr></table></figure></li><li><p>对于<code>struct</code></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//1.没有tag，只能跟在后面立刻声明</span><br><span class="hljs-keyword">struct</span>&#123;<br>    <span class="hljs-type">char</span> name;<br>    <span class="hljs-type">int</span> ID;<br>&#125;x;<br><br><span class="hljs-comment">//2. 给出一个tag:Student</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-type">char</span> name;<br>    <span class="hljs-type">int</span> ID;<br>&#125;;<br><span class="hljs-comment">//在这之后就可以用struct Student来声明一个Student类型结构体</span><br></code></pre></div></td></tr></table></figure></li><li><p>一起使用</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-comment">//1.</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span>&#123;<br>    <span class="hljs-type">char</span> name;<br>    <span class="hljs-type">int</span> ID;<br>&#125;Student;<br><span class="hljs-comment">//作用类似struct Stuent,创造了一个叫Student的数据类型</span><br><br><span class="hljs-comment">//2.</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *next;<br>&#125;node;<br><span class="hljs-comment">//等效于两步</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>    xxxxx;<br>&#125;;<br><span class="hljs-keyword">typedef</span> Node node<br></code></pre></div></td></tr></table></figure></li><li><p>C 与 C++中的区别</p><p>如果只是为了声明一个“结构体变量”<code>var</code>，两者都可以简单的使用</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//1.</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tag</span>&#123;<br>    <span class="hljs-type">int</span> xxx;<br>    <span class="hljs-type">char</span> xxx;<br>&#125;var;<br><br><span class="hljs-comment">//2.</span><br><span class="hljs-keyword">struct</span>&#123;<br>    xxx;<br>&#125;var;<br><br><span class="hljs-comment">//3.</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tag</span>&#123;<br>    xxx;<br>&#125;;<br>strcut tag var;<br></code></pre></div></td></tr></table></figure><p>但如果要声明一个“结构体类型”</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//c</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>&#123;</span><br>    xxx;<br>&#125;Stu;<br><span class="hljs-comment">//这时Stu是一个类型，Stu == struct Student</span><br>Stu xiaoming;<br><br><span class="hljs-comment">//如果没有typedef</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>&#123;</span><br>    xxx;<br>&#125;Stu;<br><span class="hljs-comment">//这时Stu是一个Student类型的变量，不能用来声明其他变量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">xiaoming</span>;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//C++</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-type">char</span> name;<br>&#125;;<br><span class="hljs-comment">//Student已经是一个类型，可以直接声明变量</span><br>Student xiaoming;<br><br><span class="hljs-comment">//假如在c++中使用typedef</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-type">char</span> name;<br>&#125;stu1;<br><span class="hljs-comment">//这里的stu1是个变量</span><br>stu1.name可以直接访问<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Stundent</span>&#123;<br>    <span class="hljs-type">char</span> name;<br>&#125;stu2;<br><span class="hljs-comment">//这里的stu2是个结构体类型，相当于struct Student</span><br>stu2 s2;<br>需要先声明出一个变量s2，s2.name才能继续访问<br></code></pre></div></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多仓库部署hexo博客</title>
    <link href="/2022/02/12/%E5%A4%9A%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/02/12/%E5%A4%9A%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="前言🌎"><a href="#前言🌎" class="headerlink" title="前言🌎"></a>前言🌎</h2><p>使用github部署博客虽然方便，但是由于github本身在美国，访问博客经常很慢或者打不开。因此考虑同时在国内的同类型网站上部署。</p><p>这里，我选择国内的<a href="https://gitee.com/">码云Gitee </a> 作为第二仓库。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li><p>首先我们先注册一个码云账号，建立一个 xxxxxx.gitee.io的仓库，在建立的时候默认选项就好，不需要添加其他东西。</p></li><li><p>在仓库页面的“服务”选项中打开Gittee Pages，提交你的身份信息并等待核验⌛。</p></li><li><p>找到之前生成的.ssh文件，复制里面的.pub公钥到 Gitee - 安全设置 - SSH公钥。</p></li><li><p>在博客目录下打开bash，输入 <code>ssh -T git@gitee.com</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#若出现这句话说明成功连接，键入yes并回车即可成功链接</span><br>Are you sure you want to <span class="hljs-built_in">continue</span> connecting (<span class="hljs-built_in">yes</span>/no/[fingerprint])? <br></code></pre></div></td></tr></table></figure></li><li><p>打开_config.yml文件，配置deploy选项，在不同仓库地址之前加上描述以示区分（📢注意冒号后空格）</p><p><img src="/2022/02/12/%E5%A4%9A%E4%BB%93%E5%BA%93%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2/deploy.png" alt="deploy"></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <br>    <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:ChambersXDU/ChambersXDU.github.io.git</span><br>    <span class="hljs-attr">gitee:</span> <span class="hljs-string">git@gitee.com:aichenxdu/aichenxdu.gitee.io.git</span><br></code></pre></div></td></tr></table></figure></li><li><p>清除、生成、部署</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></div></td></tr></table></figure><p>可以看见</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo d<br>INFO  Validating config<br>INFO  Deploying: git<br>INFO  Clearing .deploy_git folder...<br>INFO  Copying files from public folder...<br>INFO  Copying files from extend <span class="hljs-built_in">dirs</span>...<br>On branch master<br>nothing to commit, working tree clean<br>Everything up-to-date<br>branch <span class="hljs-string">&#x27;master&#x27;</span> <span class="hljs-built_in">set</span> up to track <span class="hljs-string">&#x27;git@github.com:ChambersXDU/ChambersXDU.github.io.git/master&#x27;</span>.<br>On branch master<br>nothing to commit, working tree clean<br>Everything up-to-date<br>branch <span class="hljs-string">&#x27;master&#x27;</span> <span class="hljs-built_in">set</span> up to track <span class="hljs-string">&#x27;git@gitee.com:aichenxdu/aichenxdu.gitee.io.git/master&#x27;</span>.<br>INFO  Deploy <span class="hljs-keyword">done</span>: git<br></code></pre></div></td></tr></table></figure><p>这时你的博客已经成功部署到两个仓库了✔️。</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编入门1</title>
    <link href="/2022/02/11/%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A81/"/>
    <url>/2022/02/11/%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A81/</url>
    
    <content type="html"><![CDATA[<h2 id="二进制的四则运算"><a href="#二进制的四则运算" class="headerlink" title="二进制的四则运算"></a>二进制的四则运算</h2><p><strong>加法</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">@ how to calculate this?<br>0000 0100<br>0000 0101 + <br>-----------<br>0000 1001<br><br>@实际上就是数电里的加法器<br><br>@steps:<br><span class="hljs-meta">#</span><span class="language-bash">1 异或 --&gt; 做加法</span><br>0000 0100<br>0000 0101 xor<br>-----------<br>0000 0001<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">2 与运算 --&gt; 输出进位，只有 1+1才会进位(若还有进位则继续，无进位则结束运算)</span><br>0000 0100<br>0000 0101 or<br>-----------<br>0000 0100<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">3 左移2的结果 --&gt;进位要到高位去</span><br>0000 1000<br><br>@（重复1 2 3）<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">4 1与3 异或 --&gt;让进位与和数相加</span><br>0000 0001<br>0000 1000 xor<br>------------<br>0000 1001<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">5 与运算 --&gt; 若还有进位则继续重复，无进位则结束运算</span><br>0000 0001<br>0000 1000 or<br>-----------<br>0000 0000<br><br>@answer 0000 1001<br><br><br></code></pre></div></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190706225927723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTE1NDYzNg==,size_16,color_FFFFFF,t_70" alt="半加器"></p><p><strong>减法</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">4 - 5 = 4+(-5)<br><br>把&quot;减5&quot;变为&quot;加-5&quot;<br>然后其余步骤与加法无异<br><br>0000 0100<br>1111 1011 +<br>-----------<br>1111 1111<br></code></pre></div></td></tr></table></figure><p><strong>乘法</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">x*y = x+x+x+···+x  <br></code></pre></div></td></tr></table></figure><p><strong>除法</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">x/y = x能减几个y = x能加几个-y<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用hexo与github搭建博客：新手指南</title>
    <link href="/2022/02/11/%E7%94%A8hexo%E4%B8%8Egithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%9A%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97/"/>
    <url>/2022/02/11/%E7%94%A8hexo%E4%B8%8Egithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%9A%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="前言💡"><a href="#前言💡" class="headerlink" title="前言💡"></a>前言💡</h2><p>借助hexo与Github，你可以快速的搭建美观的个人博客网站，并方便的修改、使用它。与此同时你并不需要写任何前端代码。</p><p>在此之前，你只需要了解一些些 Markdown 的知识即可。（真的很简单💪）</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>首先需要准备好这几样东西：</p><p>✔️<strong>node.js</strong> <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>✔️<strong>Github账号</strong> <a href="https://github.com/">https://github.com/</a></p><p>✔️<strong>Git</strong> <a href="https://git-scm.com/">https://git-scm.com/</a></p><p>✔️<strong>Typora</strong> 或其他编辑Markdown的软件。</p><p>✔️<strong>Vs Code</strong> 或其他代码编辑器。</p><p>在官网分别下载、注册、安装好即可。</p><p>打开hexo的官网文档 <a href="https://hexo.io/zh-cn/docs">https://hexo.io/zh-cn/docs</a> 按照要求安装hexo。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在桌面或者文件夹的空白位置右击，你可以看到Git Bash Here这个选项，点击就会打开一个黑框框，这就是bash，一个可供你输入命令的地方，类似Windows自带的cmd。</p><p>在 git bash 中输入以下命令,即可自动开始安装hexo</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></div></td></tr></table></figure><p>📢注意，当bash的最后一行没有出现$时，说明它正在运行上一个命令，需要继续等待或者用<code>Ctrl+C</code>终止。</p><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><p>在 git bash 中输入</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hexo init 文件名 #这就是你博客的文件，名字可以自行更换，默认存到c://user之下<br>cd 文件名<br>npm install<br></code></pre></div></td></tr></table></figure><p>这时你已经建好了你的博客，在bash中输入</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server<br></code></pre></div></td></tr></table></figure><p>如果成功，几秒后就会输出这句话</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.<br></code></pre></div></td></tr></table></figure><p>在浏览器上输入这个网址<a href="http://localhost:4000/">http://localhost:4000</a> 就能进入初始化状态的博客了，当你按 <code>Ctrl + C</code> 或者关闭 bash， 网页将会停止访问。<br>📢这只是本地的网页，想要通过互联网访问还需要借助github。</p><p>找到你的博客文件夹，打开可以看见一些基础的配置文件，比如：</p><p><strong>_config.yml</strong></p><p>是你博客网站的配置信息，可以用vs code或者其他编辑器打开或编辑，你可以在这里修改网页的标题、作者等信息。</p><p><strong>source</strong></p><p>是存放用户资源的地方。刚才生成的初始页面就存在此处。</p><p>之后每次需要生成新的页面，执行 <code>hexo new xxx</code> 的时候，就会在这里生成新的文件。</p><p><strong>_config.landscape.yml</strong></p><p>这是hexo的默认主题landscape的配置文件，可以对其自行修改(之后假如安装了其他的主题，也会生成类似的.yml文件以供修改)</p><p>更详细的文件结构可以参考这个文章 <a href="https://www.jianshu.com/p/cfd05c35833c">Hexo文件结构</a></p><h2 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a>第一篇文章</h2><p>在博客的目录下打开 bash ，输入</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hexo new 文章名字<br></code></pre></div></td></tr></table></figure><p>就会在source&#x2F;_post&#x2F;下看见 文章名字.md 文件，他已经自带了标题、时间、标签的格式，可以自行修改。<br>📢注意冒号后面一定要有一个空格，否则生成网页的时候会报错。</p><p>然后你可以自由编辑你的文章，保存好后在 bash 中输入</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server<br></code></pre></div></td></tr></table></figure><p>再次访问 <a href="http://localhost:4000/">http://localhost:4000</a> ，你会发现你的文章已经创建好了，就是这么简单👍。</p><h3 id="hexo里的几个常用命令"><a href="#hexo里的几个常用命令" class="headerlink" title="hexo里的几个常用命令"></a>hexo里的几个常用命令</h3><ul><li><p>hexo init  #初始化博客（搭建博客的时候会使用一次）</p></li><li><p>hexo n “我的博客” &#x3D;&#x3D; hexo new “我的博客”  #新建文章</p></li><li><p>hexo g &#x3D;&#x3D; hexo generate  #从source生成public文件</p></li><li><p>hexo s &#x3D;&#x3D; hexo server  #启动本地预览</p></li><li><p>hexo d &#x3D;&#x3D; hexo deploy  #部署到远程</p></li><li><p>hexo clean  #清空public目录</p></li></ul><p>详见 👉 <a href="https://hexo.io/zh-cn/docs/commands">指令 | Hexo</a></p><h2 id="接上互联网"><a href="#接上互联网" class="headerlink" title="接上互联网"></a>接上互联网</h2><p>博客虽然已经搭建好了，但是只能够本地访问，要想通过互联网访问，就需要借助Github了</p><p>首先你需要在你的Github创建一个新的仓库：xxxx.github.io （xxxx是你的github用户名，这里的格式是固定的）</p><p>在你的bash上，配置好以下的信息</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config --global user.name GitHub用户名<br>git config --global user.email GitHub注册邮箱<br></code></pre></div></td></tr></table></figure><p>你可以通过以下命令确认信息是否正确</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config user.name<br>git config user.email<br></code></pre></div></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2022/02/987f5303a789b0b1.png"></p><p>然后生成ssh密钥文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -C GitHub注册邮箱<br><span class="hljs-comment">#注意，执行此行并不会立即生成.ssh文件，要按接下来的提示，敲几次回车才能成功生成.ssh</span><br></code></pre></div></td></tr></table></figure><p>然后找到生成的.ssh的文件夹中的id_rsa.pub，将内容全部复制</p><p>打开打开<a href="github.com/settings/keys">GitHub_Settings_keys</a> 页面，新建new SSH Key，将复制的内容全部粘贴进去。</p><p>在Git Bash中检测GitHub公钥设置是否成功，输入 :</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ssh git@github.com<br></code></pre></div></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2022/02/442ba79215296bd2.png">出现以上内容则表示成功。</p><p>打开博客文件夹中的_config.yml文件，翻到最下面，修改为下图中的格式</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:xxxx.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span> <br><span class="hljs-comment">#branch这一行可以省略  </span><br></code></pre></div></td></tr></table></figure><p>📢记住一定要在冒号后面加空格！！！</p><p><img src="https://s3.bmp.ovh/imgs/2022/02/31289c5c9fbc4de5.png"></p><p>其实就是给hexo deploy 这个命令做相应的配置，让hexo知道你要把博客部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basemake">npm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><p>这时，我们分别输入三条命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">hexo clean <br>hexo g <br>hexo d<br></code></pre></div></td></tr></table></figure><p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 xxxxx.github.io</p><h2 id="踩过的一些坑⚠️"><a href="#踩过的一些坑⚠️" class="headerlink" title="踩过的一些坑⚠️"></a>踩过的一些坑⚠️</h2><h3 id="在-bash-里-github-连不上"><a href="#在-bash-里-github-连不上" class="headerlink" title="在 bash 里 github 连不上"></a>在 bash 里 github 连不上</h3><p><a href="https://blog.csdn.net/weixin_45637036/article/details/106560217">connect timed out 解决方案</a></p><h3 id="图片不出现在网页上"><a href="#图片不出现在网页上" class="headerlink" title="图片不出现在网页上"></a>图片不出现在网页上</h3><p>有三种办法：</p><ul><li><p><strong>相对路径</strong>：在source目录里手动新建一个img文件夹，在里面存图片文件，需要时引用相对路径<code>img/xxxx.jpg</code> 。</p><p>适合在.yml里面添加头像等图片时使用，不适合写文章时使用（因为编辑器找不到这个相对路径）</p></li><li><p><strong>网络链接</strong>：在网上找一个图床网站，上传图片以获取链接，直接复制链接即可</p><p>转换不太方便，且加载比较慢</p></li><li><p><strong>官方插件</strong>：</p><ul><li><p>首先打开_config.yml，找到<code>post_asset_folder</code>设置为<code>true</code></p></li><li><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install https://github.com/CodeFalling/hexo-asset-image --save<br><span class="hljs-comment">#安装可能比较久，等待几分钟</span><br></code></pre></div></td></tr></table></figure></li><li><p>这时你再新建文章的时候，会自动生成一个与文章同名的文件夹，把相关图片保存在其中</p><p><img src="/2022/02/11/%E7%94%A8hexo%E4%B8%8Egithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%9A%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97/jietu.png"></p></li><li><p>当你需要插入该图片时只要输入</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mark">![](文章标题/xxx.jpg)<br></code></pre></div></td></tr></table></figure><p>即可插入该图片</p></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
